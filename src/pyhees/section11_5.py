# ============================================================================
# 第十一章 その他
# 第五節 湿り空気
# ============================================================================

import numpy as np
from numpy import exp, log


# 日射量
def get_J(climate):
    """

    Args:
      climate:

    Returns:

    """
    return climate["水平面天空日射量 [W/m2]"].values


# ============================================================================
# 5. 相対湿度
# ============================================================================

def calc_h_ex(X_ex, Theta_ex):
    """相対湿度 式（１）

    Args:
      X_ex(ndarray): 絶対湿度(kg/kg(DA))
      Theta_ex(ndarray): 外気絶対温度(℃)

    Returns:
      ndarray: 相対温度

    """
    P_v = calc_P_v(X_ex)
    P_vs = calc_P_vs(Theta_ex)
    return P_v / P_vs * 100


# ============================================================================
# 6. 絶対湿度
# ============================================================================

def get_X(Theta):
    """(2)

    Args:
      Theta: 空気温度（℃）

    Returns:
      絶対湿度（kg/kg(DA)）

    """
    F = get_F()
    P_v = calc_P_v(Theta)

    return 0.622 * (P_v / (F - P_v))


def get_X_s(Theta):
    """(3)

    Args:
      Theta: 空気温度（℃）

    Returns:
      飽和空気の絶対湿度（kg/kg(DA)）

    """
    F = get_F()
    P_vs = calc_P_vs(Theta)

    return 0.622 * (P_vs / (F - P_vs))


# ============================================================================
# 7. 水蒸気圧
# ============================================================================

def calc_P_v(X):
    """水蒸気圧 (4)

    Args:
      X: 絶対湿度(kg/kg(DA))

    Returns:
      水蒸気圧（Pa）

    """

    F = get_F()

    return F * (X / (0.622 + X))


# ============================================================================
# 8. 飽和水蒸気圧
# ============================================================================

def calc_P_vs(Theta_ex):
    """外気の飽和水蒸気圧　式（3a）

    Args:
      Theta_ex(ndarray): 外気絶対温度[K]

    Returns:
      ndarray: 外気の飽和水蒸気圧

    """
    k = get_k(Theta_ex)
    return exp(k)


def get_k(Theta_ex):
    """指数k 式(5b)

    Args:
      Theta_ex(ndarray): 外気温 (℃)

    Returns:
      ndarray: 指数k

    """
    T = get_T(Theta_ex)

    a1 = -6096.9385
    a2 = 21.2409642
    a3 = -0.02711193
    a4 = 0.00001673952
    a5 = 2.433502
    b1 = -6024.5282
    b2 = 29.32707
    b3 = 0.010613863
    b4 = -0.000013198825
    b5 = -0.49382577

    k = np.zeros(24 * 365)

    f1 = Theta_ex > 0
    k[f1] = a1 / T[f1] + a2 + a3 * T[f1] + a4 * T[f1] ** 2 + a5 * np.log(T[f1])

    f2 = Theta_ex <= 0
    k[f2] = b1 / T[f2] + b2 + b3 * T[f2] + b4 * T[f2] ** 2 + b5 * np.log(T[f2])

    return k


# ============================================================================
# 9. 絶対温度
# ============================================================================

def get_T(Theta):
    """絶対温度(K) (6)

    Args:
      Theta(ndarray): 空気温度（℃）

    Returns:
      ndarray: 絶対温度(K) 

    """
    return Theta + 273.16


# ============================================================================
# 10. その他
# ============================================================================

def get_F():
    """大気圧(Pa)

    Args:

    Returns:
      int: 大気圧(Pa)

    """
    return 101325
