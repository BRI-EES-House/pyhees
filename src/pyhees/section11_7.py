# ============================================================================
# 第十一章 その他
# 第七節 基準設定仕様
# ============================================================================

import pyhees.section4_1_a as sc4_1_a
import pyhees.section4_1_b as sc4_1_b


# ============================================================================
# 5. 暖房設備
# ============================================================================

def get_reference_spec_H(region, mode_H, H_MR_in, H_OR_in, operating_mode_MR=None, operating_mode_OR=None):
    """基準設定仕様に基づいて一次エネルギー消費量を算定する場合について、暖房設備の算定に係る設定を取得する関数。

    Args:
        region (int): 省エネルギー地域区分
        mode_H (str): 暖房方式 '住戸全体を連続的に暖房する方式', '居室のみを暖房する方式でかつ主たる居室とその他の居室ともに温水暖房を設置する場合に該当しない場合'
        H_MR_in (dict): 主たる居室の暖房機器の仕様(入力値)
        H_OR_in (dict): その他の居室の暖房機器の仕様(入力値)
        operating_mode_MR (str, optional): 主たる居室の運転方法 '連続', '間歇' (Default value = None)
        operating_mode_OR (str, optional): その他の居室の運転方法 '連続', '間歇' (Default value = None)

    Returns:
        H_A (dict): 住戸全体を連続的に暖房する方式における暖房機器の基準設定仕様
        H_MR (dict): 主たる居室の暖房機器の基準設定仕様
        H_OR (dict): その他の居室の暖房機器の基準設定仕様
        H_HS (dict): 温水暖房機の基準設定仕様

    Notes:
        第二章第二節 設計一次エネルギー消費量 の付録Eから呼び出される場合、主たる居室・その他の居室の運転方法を引数で指定する。

    """
    # 5.1 暖房方式
    # NOTE: 引数で直接指定されている場合は、そちらを優先する。
    if all(_ is None for _ in [operating_mode_MR, operating_mode_OR]):
        operating_mode_MR, operating_mode_OR = get_operating_mode_H(region, H_MR_in, H_OR_in)
    
    # 5.2 暖房方式の種類
    H_A_type  = get_H_A_type(region, mode_H)
    H_MR_type = get_H_XR_type(region, mode_H, R_type='主たる居室',   operating_mode=operating_mode_MR)
    H_OR_type = get_H_XR_type(region, mode_H, R_type='その他の居室', operating_mode=operating_mode_OR)

    # 住戸全体の暖房設備機器の仕様を取得
    #   → 5.3 ダクト式セントラル空調機
    H_A = {
        'ダクト式セントラル空調機': get_H_A_dc(),
        None:                       None,
    }[H_A_type]

    # 主たる居室・その他の居室の暖房設備機器の仕様を取得
    #   → 5.4 ルームエアコンディショナー
    #   → 5.5 FF暖房機
    #   → 5.6 温水暖房用パネルラジエーター
    H_MR, H_OR = [{
        'ルームエアコンディショナー':   get_H_XR_rac(),
        'FF暖房機':                     get_H_XR_ff(),
        '温水暖房用パネルラジエーター': get_H_XR_rad_panel(),
        None:                           None,
    }[_] for _ in (H_MR_type, H_OR_type)]

    # 温水暖房機の仕様を取得
    #   → 5.6 温水暖房用パネルラジエーター
    H_HS = get_H_HS_rad_panel(region)

    return H_A, H_MR, H_OR, H_HS


# ============================================================================
# 5.1 暖房方式
# ============================================================================

def get_operating_mode_H(region, H_MR_in, H_OR_in):
    """暖房方式及び運転方法の区分を取得する関数

    Args:
        region (int): 省エネルギー地域区分
        H_MR_in (dict): 主たる居室の暖房機器の仕様(入力値)
        H_OR_in (dict): その他の居室の暖房機器の仕様(入力値)

    Returns:
        operating_mode_MR (str): 主たる居室の運転方法 '連続', '間歇'
        operating_mode_OR (str): その他の居室の運転方法 '連続', '間歇'

    """
    # 当該住戸に設置する暖房設備に応じて第四章「暖冷房設備」第一節「全般」の付録Aにより定まる。
    mode_MR, mode_OR = sc4_1_a.calc_heating_mode(region, H_MR=H_MR_in, H_OR=H_OR_in)

    mapper = {
        'ろ': '連続',
        'は': '間歇',
    }
    return mapper.get(mode_MR), mapper.get(mode_OR)


# ============================================================================
# 5.2 暖房方式の種類
# ============================================================================

def get_H_A_type(region, mode_H):
    """住戸全体を連続的に暖房する方式における、暖房設備の種類を取得する関数

    Args:
        region (int): 省エネルギー地域区分
        mode_H (str): 暖房方式

    Returns:
        H_A_type (str): 住戸全体を連続的に暖房する方式における暖房設備の種類
    """
    if mode_H != '住戸全体を連続的に暖房する方式':
        return None

    # 暖房設備の種類は、当該住戸の地域の区分および暖房方式に応じて表1により定まる。
    table_1 = get_table_1()
    x = get_x_of_table_1(mode_H)
    y = get_y_of_table_1(region)
    H_A_type = table_1[y][x]

    return H_A_type


def get_H_XR_type(region, mode_H, R_type, operating_mode):
    """居室のみを暖房する方式における、暖房設備の種類を取得する関数

    Args:
        region (int): 省エネルギー地域区分
        mode_H (str): 暖房方式
        R_type (str): 主たる居室／その他の居室
        operating_mode (str): 主たる居室／その他の居室の運転方法 '連続', '間歇'

    Returns:
        H_XR_type (str): 主たる居室／その他の居室の暖房機器の種類
        H_HS_type (str): 温水暖房機の種類
    """
    if mode_H != '居室のみを暖房する方式でかつ主たる居室とその他の居室ともに温水暖房を設置する場合に該当しない場合':
        return None

    # 暖房設備の種類は、当該住戸の地域の区分および暖房方式に応じて表1により定まる。
    table_1 = get_table_1()
    x = get_x_of_table_1(mode_H, R_type, operating_mode)
    y = get_y_of_table_1(region)

    H_XR_type = table_1[y][x]

    return H_XR_type


def get_table_1():
    """表1 暖房設備の種類 を取得する関数

    Returns:
        table_1 (list): 表1 暖房設備の種類
    """
    dc        = 'ダクト式セントラル空調機'
    rac       = 'ルームエアコンディショナー'
    ff        = 'FF暖房機'
    rad_panel = '温水暖房用パネルラジエーター'

    return [
        [dc,   rad_panel, ff,   rad_panel , ff],
        [dc,   rad_panel, rac,  rad_panel, rac],
        [None, None,      None, None,     None],
    ]


def get_x_of_table_1(mode_H, R_type=None, operating_mode=None):
    """表1 暖房設備の種類 における行番号を取得する関数

    Returns:
        x (int): 表1 暖房設備の種類 における行番号
    """
    if mode_H == '住戸全体を連続的に暖房する方式':
        return 0

    elif mode_H == '居室のみを暖房する方式でかつ主たる居室とその他の居室ともに温水暖房を設置する場合に該当しない場合':
        return {
            ('主たる居室',   '連続'): 1,
            ('主たる居室',   '間歇'): 2,
            ('その他の居室', '連続'): 3,
            ('その他の居室', '間歇'): 4,
        }.get((R_type, operating_mode))

    else:
        raise ValueError(mode_H)


def get_y_of_table_1(region):
    """表1 暖房設備の種類 における列番号を取得する関数

    Returns:
        y (int): 表1 暖房設備の種類 における列番号
    """
    if region in [1, 2, 3, 4]:
        return 0

    elif region in [5, 6, 7]:
        return 1

    elif region in [8]:
        return 2

    else:
        raise ValueError(region)


# ============================================================================
# 5.3 ダクト式セントラル空調機
# ============================================================================

def get_H_A_dc():
    """ダクト式セントラル空調機の基準設定仕様を取得する関数

    Returns:
        H_A (dict): ダクト式セントラル空調機の基準設定仕様
    """
    # ============================================================================
    # ①熱源機
    # ============================================================================

    # 定格暖房能力および定格暖房消費電力は、床面積の合計に応じて第四章「暖冷房設備」第二節「ダクト式セントラル空調機」の付録Bに定義される方法により定まる。
    # 中間暖房能力および中間暖房消費電力、定格暖房能力運転時の風量および送風機の消費電力、中間暖房能力運転時の風量および送風機の消費電力、暖房時の送風機の設計風量は、上記の方法により定まる定格冷房能力に応じて第四章「暖冷房設備」第二節「ダクト式セントラル空調機」の付録Bに定義される方法により定まる。
    EquipmentSpec = '入力しない'

    # VAV の機構は有さないものとする。
    VAV = False

    # 全般換気の機能は、有するものとする。
    general_ventilation = True

    # ============================================================================
    # ②ダクト
    # ============================================================================

    # ダクトの全部または一部が断熱区画外にあるとする。
    duct_insulation = '全てもしくは一部が断熱区画外である'

    return {
        'type':                'ダクト式セントラル空調機',
        'EquipmentSpec':       EquipmentSpec,
        'VAV':                 VAV,
        'general_ventilation': general_ventilation,
        'duct_insulation':     duct_insulation,
    }


# ============================================================================
# 5.4 ルームエアコンディショナー
# ============================================================================

def get_H_XR_rac():
    """ルームエアコンディショナーの基準設定仕様を取得する関数

    Returns:
        H_XR (dict): 主たる居室／その他居室におけるルームエアコンディショナーの基準設定仕様
    """
    # 定格エネルギー消費効率の区分は、第四章「暖冷房設備」第三節「ルームエアコンディショナー」に規定する「区分（ろ）」とする。
    e_class = 'ろ'

    # 小能力時高効率型コンプレッサーは、搭載しないとする。
    dualcompressor = False

    return {
        'type':           'ルームエアコンディショナー',
        'e_class':        e_class,
        'dualcompressor': dualcompressor,
    }


# ============================================================================
# 5.5 FF暖房機
# ============================================================================

def get_H_XR_ff():
    """FF暖房機の基準設定仕様を取得する関数

    Returns:
        H_XR (dict): 主たる居室／その他居室におけるFF暖房機の基準設定仕様
    """
    # FF暖房機の定格燃焼効率は、86%とする。
    e_rtd = 0.86

    return {
        'type':  'FF暖房機',
        'e_rtd': e_rtd,
    }


# ============================================================================
# 5.6 温水暖房用パネルラジエーター
# ============================================================================

def get_H_XR_rad_panel():
    """温水暖房用パネルラジエーターの基準設定仕様を取得する関数

    Returns:
        H_XR (dict): 主たる居室／その他居室における温水暖房用パネルラジエーターの基準設定仕様
    """
    return {
        'type': '温水暖房用パネルラジエーター',
    }


def get_H_HS_rad_panel(region):
    """温水暖房用パネルラジエーターにおける温水暖房機の基準設定仕様を取得する関数

    Returns:
        H_HS (dict): 温水暖房用パネルラジエーターにおける温水暖房機の基準設定仕様
    """
    # ============================================================================
    # ①温水暖房機
    # ============================================================================

    # 温水暖房用熱源機の種類および効率は、当該住戸の地域の区分に応じて、表 2 により定まる。 
    oil = "石油従来型温水暖房機"
    gas = "ガス従来型温水暖房機"
    oil_rtd_hs = 0.830
    gas_rtd_hs = 0.825
    
    h_hs_type, e_rtd_hs = {
        1: (oil, oil_rtd_hs),
        2: (oil, oil_rtd_hs),
        3: (oil, oil_rtd_hs),
        4: (oil, oil_rtd_hs),
        5: (gas, gas_rtd_hs),
        6: (gas, gas_rtd_hs),
        7: (gas, gas_rtd_hs),
        8: (None, None),
    }[region]

    # ============================================================================
    # ②配管
    # ============================================================================

    # 全ての配管に断熱被膜があるものとする。
    pipe_insulation = True

    # 全てもしくは一部が断熱区画外に設置されるとする。
    underfloor_pipe_insulation = False

    return {
        'type':                       h_hs_type,
        'e_rtd_hs':                   e_rtd_hs,
        'pipe_insulation':            pipe_insulation,
        'underfloor_pipe_insulation': underfloor_pipe_insulation,
    }


# ============================================================================
# 6. 冷房設備
# ============================================================================

def get_reference_spec_C(region, mode_C, C_MR_in, C_OR_in, operating_mode_MR=None, operating_mode_OR=None):
    """基準設定仕様に基づいて一次エネルギー消費量を算定する場合について、冷房設備の算定に係る設定を取得する関数。

    Args:
        region (int): 省エネルギー地域区分
        mode_C (str): 冷房方式 '住戸全体を連続的に冷房する方式', '居室のみを冷房する方式'
        C_MR_in (dict): 主たる居室の冷房機器の仕様(入力値)
        C_OR_in (dict): その他の居室の冷房機器の仕様(入力値)
        operating_mode_MR (str, optional): 主たる居室の運転方法 '連続', '間歇' (Default value = None)
        operating_mode_OR (str, optional): その他の居室の運転方法 '連続', '間歇' (Default value = None)

    Returns:
        C_A (dict): 住戸全体を連続的に冷房する方式における冷房機器の基準設定仕様
        C_MR (dict): 主たる居室の冷房機器の基準設定仕様
        C_OR (dict): その他の居室の冷房機器の基準設定仕様

    Notes:
        第二章第二節 設計一次エネルギー消費量 の付録Eから呼び出される場合、主たる居室・その他の居室の運転方法を引数で指定する。

    """
    # 6.1 冷房方式
    # NOTE: 引数で直接指定されている場合は、そちらを優先する。
    if all(_ is None for _ in [operating_mode_MR, operating_mode_OR]):
        operating_mode_MR, operating_mode_OR = get_operating_mode_C(C_MR_in, C_OR_in)

    # 6.2 冷房設備の種類
    C_A_type  = get_C_A_type(region, mode_C)
    C_MR_type = get_C_XR_type(region, mode_C, R_type='主たる居室',   operating_mode=operating_mode_MR)
    C_OR_type = get_C_XR_type(region, mode_C, R_type='その他の居室', operating_mode=operating_mode_OR)

    # 住戸全体の冷房設備機器の仕様を取得
    #   → 6.3 ダクト式セントラル空調機
    C_A = {
        'ダクト式セントラル空調機': get_C_A_dc(),
        None:                       None,
    }[C_A_type]

    # 主たる居室・その他の居室の暖房設備機器の仕様を取得
    #   → 6.4 ルームエアコンディショナー
    C_MR, C_OR = [{
        'ルームエアコンディショナー':   get_C_XR_rac(),
        None:                           None,
    }[_] for _ in (C_MR_type, C_OR_type)]

    return C_A, C_MR, C_OR


# ============================================================================
# 6.1 冷房方式
# ============================================================================

def get_operating_mode_C(C_MR_in, C_OR_in):
    """冷房方式及び運転方法の区分を取得する関数

    Args:
        C_MR_in (dict): 主たる居室の冷房機器の仕様(入力値)
        C_OR_in (dict): その他の居室の冷房機器の仕様(入力値)

    Returns:
        operating_mode_MR (str): 主たる居室の運転方法 '連続', '間歇'
        operating_mode_OR (str): その他の居室の運転方法 '連続', '間歇'

    """
    # 当該住戸に設置される冷房設備に応じて第四章「暖冷房設備」第一節「全般」の付録Bにより定まる。
    mode_MR, mode_OR = sc4_1_b.calc_cooling_mode(C_MR=C_MR_in, C_OR=C_OR_in)

    mapper = {
        'ろ': '連続',
        'は': '間歇',
    }
    return mapper.get(mode_MR), mapper.get(mode_OR)


# ============================================================================
# 6.2 冷房設備の種類
# ============================================================================

def get_C_A_type(region, mode_C):
    """住戸全体を連続的に冷房する方式における、冷房設備の種類を取得する関数

    Args:
        region (int): 省エネルギー地域区分
        mode_C (str): 冷房方式

    Returns:
        C_A_type (str): 住戸全体を連続的に冷房する方式における冷房設備の種類
    """
    if mode_C != '住戸全体を連続的に冷房する方式':
        return None

    # 冷房設備の種類は、当該住戸の地域の区分および冷房方式に応じて表2により定まる。
    table_2 = get_table_2()
    x = get_x_of_table_2(mode_C)
    y = get_y_of_table_2(region)
    C_A_type = table_2[y][x]

    return C_A_type


def get_C_XR_type(region, mode_C, R_type, operating_mode):
    """居室のみを冷房する方式における、冷房設備の種類を取得する関数

    Args:
        region (int): 省エネルギー地域区分
        mode_C (str): 冷房方式
        R_type (str): 主たる居室／その他の居室
        operating_mode (str): 主たる居室／その他の居室の運転方法 '連続', '間歇'

    Returns:
        C_XR_type (str): 主たる居室／その他の居室の冷房機器の種類
    """
    if mode_C != '居室のみを冷房する方式':
        return None

    # 冷房設備の種類は、当該住戸の地域の区分および冷房方式に応じて表2により定まる。
    table_2 = get_table_2()
    x = get_x_of_table_2(mode_C, R_type, operating_mode)
    y = get_y_of_table_2(region)
    C_XR_type = table_2[y][x]

    return C_XR_type


def get_table_2():
    """表2 冷房設備の種類 を取得する関数

    Returns:
        table_2 (list): 表2 冷房設備の種類
    """
    dc  = 'ダクト式セントラル空調機'
    rac = 'ルームエアコンディショナー'

    return [
        [dc, None, rac,  None, rac],
    ]


def get_x_of_table_2(mode_C, R_type=None, operating_mode=None):
    """表2 冷房設備の種類 における行番号を取得する関数

    Returns:
        x (int): 表2 冷房設備の種類 における行番号
    """
    if mode_C == '住戸全体を連続的に冷房する方式':
        return 0

    elif mode_C == '居室のみを冷房する方式':
        return {
            ('主たる居室',   '連続'): 1,
            ('主たる居室',   '間歇'): 2,
            ('その他の居室', '連続'): 3,
            ('その他の居室', '間歇'): 4,
        }.get((R_type, operating_mode))

    else:
        raise ValueError(mode_C)


def get_y_of_table_2(region):
    """表2 冷房設備の種類 における列番号を取得する関数

    Returns:
        y (int): 表2 冷房設備の種類 における列番号
    """
    if region in [1, 2, 3, 4, 5, 6, 7, 8]:
        return 0

    else:
        raise ValueError(region)


# ============================================================================
# 6.3 ダクト式セントラル空調機
# ============================================================================

def get_C_A_dc():
    """ダクト式セントラル空調機の基準設定仕様を取得する関数

    Returns:
        C_A (dict): ダクト式セントラル空調機の基準設定仕様
    """
    # ============================================================================
    # ①熱源機
    # ============================================================================

    # 定格冷房能力および定格冷房消費電力は、床面積の合計に応じて第四章「暖冷房設備」第二節「ダクト式セントラル空調機」の付録Bに定義される方法により定まる。
    # 中間冷房能力および中間冷房消費電力、定格冷房能力運転時の風量および送風機の消費電力、中間冷房能力運転時の風量および送風機の消費電力、冷房時の送風機の設計風量は、上記の方法により定まる定格冷房能力に応じて第四章「暖冷房設備」第二節「ダクト式セントラル空調機」の付録Bに定義される方法により定まる。
    EquipmentSpec = '入力しない'

    # VAV の機構は有さないものとする。
    VAV = False

    # 全般換気の機能は、有するものとする。
    general_ventilation = True

    # ============================================================================
    # ②ダクト
    # ============================================================================

    # ダクトの全部または一部が断熱区画外にあるとする。
    duct_insulation = '全てもしくは一部が断熱区画外である'

    return {
        'type':                'ダクト式セントラル空調機',
        'EquipmentSpec':       EquipmentSpec,
        'VAV':                 VAV,
        'general_ventilation': general_ventilation,
        'duct_insulation':     duct_insulation,
    }


# ============================================================================
# 6.4 ルームエアコンディショナー
# ============================================================================

def get_C_XR_rac():
    """ルームエアコンディショナーの基準設定仕様を取得する関数

    Returns:
        C_XR (dict): 主たる居室／その他居室におけるルームエアコンディショナーの基準設定仕様
    """
    # 定格エネルギー消費効率の区分は、第四章「暖冷房設備」第三節「ルームエアコンディショナー」に規定する「区分（ろ）」とする。
    e_class = 'ろ'

    # 小能力時高効率型コンプレッサーは、搭載しないとする。
    dualcompressor = False

    return {
        'type':           'ルームエアコンディショナー',
        'e_class':        e_class,
        'dualcompressor': dualcompressor,
    }


# ============================================================================
# 7. 機械換気設備
# ============================================================================

def get_reference_spec_V():
    """基準設定仕様に基づいて一次エネルギー消費量を算定する場合について、機械換気設備の算定に係る設定を取得する関数。

    Returns:
        V (dict): 機械換気設備の基準設定仕様
    """
    # 全般換気設備の比消費電は、第五章「換気設備」の付録Aに基づき、「壁付け式第三種換気設備」に対応する0.3 W/(m3/h)とする。
    type_ = '壁付け式第二種換気設備又は壁付け式第三種換気設備'
    input_ = '評価しない'

    # 換気回数は、0.5 回/hとする。
    N = 0.5

    return {
        'type': type_,
        'input': input_,
        'N':    N,
    }


# ============================================================================
# 8. 照明設備
# ============================================================================

def get_reference_spec_L(R_type):
    """基準設定仕様に基づいて一次エネルギー消費量を算定する場合について、照明設備の算定に係る設定を取得する関数。

    Args:
        R_type (str): 主たる居室／その他の居室／非居室

    Returns:
        L_XR (dict): 主たる居室／その他の居室／非居室における照明設備の基準設定仕様
    """
    # 平均総合効率には、照明区画が主たる居室またはその他の居室である場合は、第六章「照明設備」の
    # 「6.3 平均総合効率」に規定する「（は）」欄の値を、当該照明区画が非居室である場合は、「（ろ）」欄の値を適用する。
    power = {
        '主たる居室':   'いずれかの機器において白熱灯を使用している',
        'その他の居室': 'いずれかの機器において白熱灯を使用している',
        '非居室':       'すべての機器において白熱灯以外を使用している',
    }[R_type]

    # 調光が可能な制御の導入、人感センサーの導入および多灯分散照明方式は、いずれも導入されていないものとし、
    # 調光による補正係数、人感センサーによる補正係数および多灯分散照明方式による補正係数には、それぞれ、
    # 第六章「照明設備」の「6.5 調光による補正係数」「6.6 人感センサーによる補正係数」および「6.7 多灯分散照明方式による補正係数」の「（ろ）」欄の値を適用する。
    dimming = '採用しない'
    sensor  = '採用しない'
    multi   = '採用しない'

    return {
        'power':     power,
        'dimming':   dimming,
        'sensor':    sensor,
        'multi':     multi,
    }


# ============================================================================
# 9. 給湯設備
# ============================================================================

def get_reference_spec_HW(region):
    """基準設定仕様に基づいて一次エネルギー消費量を算定する場合について、給湯設備の算定に係る設定を取得する関数。

    Args:
        region (int): 省エネルギー地域区分

    Returns:
        HW (dict): 給湯設備の基準設定仕様
    """
    # 給湯機の種類および効率は、当該住戸の地域の区分に応じて、表3により定まる。
    hw_type, e_rtd = {
        1: ('石油従来型給湯機', 0.813),
        2: ('石油従来型給湯機', 0.813),
        3: ('石油従来型給湯機', 0.813),
        4: ('石油従来型給湯機', 0.813),
        5: ('ガス従来型給湯機', 0.782),
        6: ('ガス従来型給湯機', 0.782),
        7: ('ガス従来型給湯機', 0.782),
        8: ('ガス従来型給湯機', 0.782),
    }[region]

    return {
        'hw_type': hw_type,
        'e_rtd':   e_rtd,
    }


# ============================================================================
# 14. 床面積の合計・主たる居室の床面積・その他の居室の床面積・外皮の部位の面積の合計
# ============================================================================

def get_A(tatekata):
    """床面積の合計、主たる居室の床面積およびその他の居室の床面積ならびに外皮の部位の面積の合計 を取得する関数

    Args:
        tatekata (str): 建て方

    Returns:
        A_A (float): 床面積の合計 (m2)
        A_MR (float): 主たる居室の床面積 (m2)
        A_OR (float): その他の居室の床面積 (m2)
        A_env (float): 外皮の部位の面積の合計 (m2)
    """
    A_A, A_MR, A_OR, A_env = {
        '戸建住宅': (120.08, 29.81, 51.34, 307.51),
        '共同住宅': (70.00,  24.22, 29.75, 238.22),
    }[tatekata]

    return A_A, A_MR, A_OR, A_env
