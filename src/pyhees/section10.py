# ============================================================================
# 第十章 家電・調理
# Ver.04（エネルギー消費性能計算プログラム（住宅版）Ver.02～）
# ============================================================================

import numpy as np
from pyhees.section11_3 import load_schedule, get_schedule_app, get_schedule_cc


# ============================================================================
# 5. 家電の一次エネルギー消費量
# ============================================================================

# ============================================================================
# 5.1 消費電力量
# ============================================================================

def calc_E_E_AP_d_t(n_p):
    """1 時間当たりの家電の消費電力量

    Args:
      n_p(float): 仮想居住人数 仮想居住人数

    Returns:
      ndarray: 1 時間当たりの家電の消費電力量

    """
    schedule = load_schedule()
    schedule_app = get_schedule_app(schedule)

    if 1 <= n_p and n_p <= 2:
        E_E_AP_1_d_t = get_E_E_AP_p_d_t(1, schedule_app)
        E_E_AP_2_d_t = get_E_E_AP_p_d_t(2, schedule_app)
        return E_E_AP_1_d_t * (2 - n_p) / (2 - 1) + E_E_AP_2_d_t * (n_p - 1) / (2 - 1)
    elif 2 <= n_p and n_p <= 3:
        E_E_AP_2_d_t = get_E_E_AP_p_d_t(2, schedule_app)
        E_E_AP_3_d_t = get_E_E_AP_p_d_t(3, schedule_app)
        return E_E_AP_2_d_t * (3 - n_p) / (3 - 2) + E_E_AP_3_d_t * (n_p - 2) / (3 - 2)
    elif 3 <= n_p and n_p <= 4:
        E_E_AP_3_d_t = get_E_E_AP_p_d_t(3, schedule_app)
        E_E_AP_4_d_t = get_E_E_AP_p_d_t(4, schedule_app)
        return E_E_AP_3_d_t * (4 - n_p) / (4 - 3) + E_E_AP_4_d_t * (n_p - 3) / (4 - 3)
    else:
        raise ValueError(n_p)


# ============================================================================
# 5.2 ガス消費量
# ============================================================================

def get_E_G_AP_d_t():
    """1 時間当たりの家電のガス消費量

    Args:

    Returns:
      ndarray: 1 時間当たりの家電のガス消費量

    """
    return np.zeros(24 * 365)


# ============================================================================
# 5.3 灯油消費量
# ============================================================================

def get_E_K_AP_d_t():
    """1 時間当たりの家電の灯油消費量

    Args:

    Returns:
      ndarray: 1 時間当たりの家電の灯油消費量

    """
    return np.zeros(24 * 365)


# ============================================================================
# 5.4 その他の燃料による一次エネルギー消費量
# ============================================================================

def get_E_M_AP_d_t():
    """1 時間当たりの家電のその他の燃料による一次エネルギー消費量

    Args:

    Returns:
      ndarray: 1 時間当たりの家電のその他の燃料による一次エネルギー消費量

    """
    return np.zeros(24 * 365)


# ============================================================================
# 6. 調理の一次エネルギー消費量
# ============================================================================

# ============================================================================
# 6.1 消費電力量
# ============================================================================

def get_E_E_CC_d_t():
    """1 時間当たりの調理の消費電力量

    Args:

    Returns:
      ndarray: 1 時間当たりの調理の消費電力量

    """
    return np.zeros(24 * 365)


# ============================================================================
# 6.2 ガス消費量
# ============================================================================

def calc_E_G_CC_d_t(n_p):
    """1 時間当たりの調理のガス消費量

    Args:
      n_p(float): 仮想居住人数

    Returns:
      ndarray: 1 時間当たりの調理のガス消費量

    """
    schedule = load_schedule()
    schedule_cc = get_schedule_cc(schedule)

    if 1 <= n_p and n_p <= 2:
        E_G_CC_1_d_t = get_E_G_CC_p_d_t(1, schedule_cc)
        E_G_CC_2_d_t = get_E_G_CC_p_d_t(2, schedule_cc)
        return E_G_CC_1_d_t * (2 - n_p) / (2 - 1) + E_G_CC_2_d_t * (n_p - 1) / (2 - 1)
    elif 2 <= n_p and n_p <= 3:
        E_G_CC_2_d_t = get_E_G_CC_p_d_t(2, schedule_cc)
        E_G_CC_3_d_t = get_E_G_CC_p_d_t(3, schedule_cc)
        return E_G_CC_2_d_t * (3 - n_p) / (3 - 2) + E_G_CC_3_d_t * (n_p - 2) / (3 - 2)
    elif 3 <= n_p and n_p <= 4:
        E_G_CC_3_d_t = get_E_G_CC_p_d_t(3, schedule_cc)
        E_G_CC_4_d_t = get_E_G_CC_p_d_t(4, schedule_cc)
        return E_G_CC_3_d_t * (4 - n_p) / (4 - 3) + E_G_CC_4_d_t * (n_p - 3) / (4 - 3)
    else:
        raise ValueError(n_p)


# ============================================================================
# 6.3 灯油消費量
# ============================================================================

def get_E_K_CC_d_t():
    """1 時間当たりの調理の灯油消費量

    Args:

    Returns:
      ndarray: 1 時間当たりの調理の灯油消費量

    """
    return np.zeros(24 * 365)


# ============================================================================
# 6.4 その他の燃料による一次エネルギー消費量
# ============================================================================


def get_E_M_CC_d_t():
    """1 時間当たりの調理のその他の燃料による一次エネルギー消費量

    Args:

    Returns:
      ndarray: 1 時間当たりの調理のその他の燃料による一次エネルギー消費量

    """
    return np.zeros(24 * 365)


# ============================================================================
# 付録 A 1 時間当たりのエネルギー消費量の計算方法
# ============================================================================

# ============================================================================
# A.1 家電による消費電力量
# ============================================================================

def get_E_E_AP_p_d_t(p, schedule_app):
    """1 時間当たりの居住人数がp人における家電の消費電力量

    Args:
      p(float): 居住人数
      schedule_app(ndarray): 家電スケジュール

    Returns:
      ndarray: 1 時間当たりの居住人数がp人における家電の消費電力量

    """
    # 平日
    workday = np.tile([get_table_a_1()[i][(p - 1) * 3 + 0] for i in range(24)], 365)

    # 休日外出
    holiday_out = np.tile([get_table_a_1()[i][(p - 1) * 3 + 1] for i in range(24)], 365)

    # 休日在宅
    holiday_in = np.tile([get_table_a_1()[i][(p - 1) * 3 + 2] for i in range(24)], 365)

    # スケジュールを時間ごとに拡張
    schedule = np.repeat(schedule_app, 24)

    return (workday * (schedule == '平日')
            + holiday_out * (schedule == '休日外')
            + holiday_in * (schedule == '休日在'))


# ============================================================================
# A.2 調理によるガス消費量
# ============================================================================

def get_E_G_CC_p_d_t(p, schedule_cc):
    """1 時間当たりの居住人数がp人における調理のガス消費量

    Args:
      p(float): 居住人数
      schedule_cc(ndarray): 調理スケジュール

    Returns:
      ndarray: 1 時間当たりの居住人数がp人における調理のガス消費量

    """
    # 平日
    workday = np.tile([get_table_a_2()[i][(p - 1) * 3 + 0] for i in range(24)], 365)

    # 休日外出
    holiday_out = np.tile([get_table_a_2()[i][(p - 1) * 3 + 1] for i in range(24)], 365)

    # 休日在宅
    holiday_in = np.tile([get_table_a_2()[i][(p - 1) * 3 + 2] for i in range(24)], 365)

    # スケジュールを時間ごとに拡張
    schedule = np.repeat(schedule_cc, 24)

    return (workday * (schedule == '平日')
            + holiday_out * (schedule == '休日外')
            + holiday_in * (schedule == '休日在'))


def get_table_a_1():
    """表 A.1 家電による 1 時間当たりの消費電力量

    Args:

    Returns:
      list: 表 A.1 家電による 1 時間当たりの消費電力量

    """
    table_a_1 = [
        (0.1578, 0.1578, 0.1578, 0.1578, 0.1578, 0.1578, 0.1806, 0.1806, 0.1806, 0.1812, 0.1812, 0.1812),
        (0.0483, 0.0483, 0.0483, 0.0483, 0.0483, 0.0483, 0.0711, 0.0711, 0.0711, 0.0717, 0.0717, 0.0717),
        (0.0560, 0.0560, 0.0560, 0.0561, 0.0561, 0.0561, 0.0788, 0.0788, 0.0788, 0.0795, 0.0795, 0.0795),
        (0.0560, 0.0560, 0.0560, 0.0561, 0.0561, 0.0561, 0.0788, 0.0788, 0.0788, 0.0795, 0.0795, 0.0795),
        (0.0483, 0.0483, 0.0483, 0.0483, 0.0483, 0.0483, 0.0711, 0.0711, 0.0711, 0.0717, 0.0717, 0.0717),
        (0.0560, 0.0560, 0.0560, 0.0561, 0.0561, 0.0561, 0.0788, 0.0788, 0.0788, 0.0795, 0.0795, 0.0795),
        (0.1925, 0.0859, 0.0560, 0.2611, 0.1159, 0.0561, 0.3525, 0.1685, 0.0788, 0.3531, 0.1692, 0.0795),
        (0.1524, 0.2346, 0.1168, 0.2480, 0.2703, 0.1854, 0.3662, 0.3287, 0.2767, 0.3669, 0.3294, 0.2774),
        (0.1091, 0.2282, 0.2156, 0.1448, 0.3325, 0.2812, 0.2032, 0.4595, 0.3696, 0.2039, 0.4602, 0.3702),
        (0.3011, 0.0560, 0.2163, 0.3368, 0.0561, 0.2520, 0.3953, 0.0788, 0.3265, 0.3960, 0.0795, 0.3272),
        (0.0483, 0.0483, 0.1917, 0.0483, 0.0483, 0.2274, 0.0711, 0.0711, 0.3128, 0.0717, 0.0717, 0.3134),
        (0.0560, 0.0560, 0.1994, 0.0561, 0.0561, 0.2352, 0.0788, 0.0788, 0.3150, 0.0795, 0.0795, 0.3157),
        (0.1983, 0.0560, 0.1983, 0.2727, 0.0561, 0.2727, 0.3698, 0.0788, 0.3698, 0.3705, 0.0795, 0.3705),
        (0.0483, 0.0483, 0.0483, 0.0483, 0.0483, 0.0483, 0.0711, 0.0711, 0.0711, 0.0717, 0.0717, 0.0717),
        (0.0560, 0.0560, 0.0560, 0.0561, 0.0561, 0.0561, 0.0788, 0.0788, 0.0788, 0.0795, 0.0795, 0.0795),
        (0.0560, 0.0560, 0.0560, 0.0561, 0.0561, 0.0561, 0.0788, 0.0788, 0.0788, 0.0795, 0.0795, 0.0795),
        (0.0483, 0.0483, 0.2095, 0.0483, 0.0483, 0.2750, 0.0711, 0.0711, 0.3956, 0.0717, 0.0717, 0.5453),
        (0.1304, 0.0560, 0.2423, 0.2048, 0.0561, 0.2781, 0.3019, 0.0788, 0.3689, 0.3026, 0.0795, 0.5187),
        (0.3030, 0.0560, 0.1819, 0.3387, 0.0561, 0.2177, 0.3972, 0.0788, 0.2978, 0.5469, 0.0795, 0.4476),
        (0.0991, 0.0483, 0.0998, 0.1348, 0.0483, 0.1355, 0.1932, 0.0711, 0.2049, 0.1939, 0.0717, 0.2056),
        (0.0917, 0.1304, 0.0917, 0.1275, 0.2048, 0.1275, 0.2102, 0.3129, 0.2183, 0.2109, 0.4626, 0.2190),
        (0.1216, 0.1755, 0.1755, 0.1873, 0.2411, 0.2411, 0.2837, 0.3322, 0.3458, 0.2844, 0.4447, 0.3465),
        (0.1738, 0.0510, 0.1139, 0.1917, 0.0511, 0.1795, 0.2620, 0.0952, 0.3002, 0.2626, 0.0959, 0.3009),
        (0.1877, 0.1877, 0.1578, 0.2176, 0.2176, 0.1578, 0.2756, 0.2703, 0.1806, 0.2763, 0.2709, 0.1812),
    ]

    return table_a_1


def get_table_a_2():
    """表 A.2 調理による 1 時間当たりのガス消費量

    Args:

    Returns:
      list: 表 A.2 調理による 1 時間当たりのガス消費量

    """
    table_a_2 = [
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 1.5935, 0, 0, 1.9235, 0, 0, 2.2536, 0, 0),
        (1.0672, 0, 0, 0, 1.116, 1.116, 0, 0, 0, 0, 0, 0),
        (0, 1.0672, 1.0672, 0, 0, 0, 0, 1.3472, 1.3472, 0, 1.5783, 1.5783),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 1.1401, 1.3762, 0, 1.3762, 1.6123, 0, 1.6123),
        (0, 0, 1.0902, 1.1401, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 5.4175, 0, 0, 6.5395, 0, 0, 7.6615),
        (0, 0, 5.1806, 5.4175, 0, 0, 6.5395, 0, 0, 7.6615, 0, 0),
        (5.1806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ]
    return table_a_2

if __name__ == '__main__':
    from section11_3 import load_schedule, get_schedule_app, get_schedule_cc

    df = load_schedule()
    schedule_app = get_schedule_app(df)
    schedule_cc = get_schedule_cc(df)

    print('家電(1人):{}'.format(np.sum(get_E_E_AP_p_d_t(1, schedule_app))))
    print('家電(1.5人):{}'.format(np.sum(calc_E_E_AP_d_t(1.5, schedule_app))))
    print('家電(2人):{}'.format(np.sum(get_E_E_AP_p_d_t(2, schedule_app))))
    print('家電(2.5人):{}'.format(np.sum(calc_E_E_AP_d_t(2.5, schedule_app))))
    print('家電(3人):{}'.format(np.sum(get_E_E_AP_p_d_t(3, schedule_app))))
    print('家電(3.5人):{}'.format(np.sum(calc_E_E_AP_d_t(3.5, schedule_app))))
    print('家電(4人):{}'.format(np.sum(get_E_E_AP_p_d_t(4, schedule_app))))

    print('調理(1人):{}'.format(np.sum(get_E_G_CC_p_d_t(1, schedule_cc))))
    print('調理(1.5人):{}'.format(np.sum(calc_E_G_CC_d_t(1.5, schedule_cc))))
    print('調理(2人):{}'.format(np.sum(get_E_G_CC_p_d_t(2, schedule_cc))))
    print('調理(2.5人):{}'.format(np.sum(calc_E_G_CC_d_t(2.5, schedule_cc))))
    print('調理(3人):{}'.format(np.sum(get_E_G_CC_p_d_t(3, schedule_cc))))
    print('調理(3.5人):{}'.format(np.sum(calc_E_G_CC_d_t(3.5, schedule_cc))))
    print('調理(4人):{}'.format(np.sum(get_E_G_CC_p_d_t(4, schedule_cc))))
