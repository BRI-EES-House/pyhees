# ============================================================================
# 第五章 換気設備
# Ver.05（エネルギー消費性能計算プログラム（住宅版）Ver.02～）
# ============================================================================

import numpy as np
from math import ceil
from pyhees.section11_3 import load_schedule, get_schedule_v


# ============================================================================
# 5. 機械換気設備の消費電力量
# ============================================================================

def calc_E_E_V_d_t(n_p, A_A, V, HEX=None):
    """1 時間当たりの機械換気設備の消費電力量（kWh/h）

    Args:
      n_p(float): 仮想居住人数
      A_A(float): 床面積の合計[m^2]
      V(dict): 換気設備仕様辞書
      HEX(dict, optional): 熱交換器型設備仕様辞書 (Default value = None)

    Returns:
      ndarray: E_E_V_d_t 日付dの時刻tにおける1時間当たりの機械換気設備の消費電力量[kWh/h]

    """
    if V is None:
        return np.zeros(24 * 365)

    schedule = load_schedule()
    schedule_v = get_schedule_v(schedule)

    input = V['input']

    type = V['type']

    # 熱交換型換気への配慮
    if HEX is not None:
        type_he = type + '（熱交換型換気設備）'
    else:
        type_he = type

    # 有効換気量率
    if type.endswith('第一種換気設備'):
        e = V.get('v_e') or 1.0
    else:
        e = 1.0

    if input == '評価しない':
        # SFP計算
        if type.startswith("ダクト式"):
            f_SFP = table_a_1[type_he]
        elif type.startswith("壁付け式"):
            f_SFP = table_a_3[type_he]
        else:
            raise ValueError(type)

    elif input == '省エネルギー手法':
        # SFP計算
        if type.startswith("ダクト式"):
            f_SFP = table_a_1[type_he] * table_a_2[type][V['duct']][V['current']]
        elif type.startswith("壁付け式"):
            f_SFP = table_a_3[type_he]
        else:
            raise ValueError(type)

    elif input == '比消費電力':
        f_SFP = V['f_SFP']
    else:
        raise ValueError(input)

    # 日付dの時刻tにおける比消費電力f_SFP_d_tは、日付dの時刻tに依らず同じ値f_SFPに等しい
    f_SFP_d_t = np.repeat(f_SFP, 24 * 365)
    E_E_VG_d_t = calc_E_E_VG_d_t(f_SFP_d_t, A_A, V['N'], e)
    E_E_VL_d_t = calc_E_E_VL_d_t(n_p, schedule_v)

    return E_E_VG_d_t + E_E_VL_d_t  # (1)


# ============================================================================
# 6. 全般換気設備の消費電力量
# ============================================================================

def calc_E_E_VG_d_t(f_SFP_d_t, A_A, N, e):
    """1 時間当たりの全般換気設備の消費電力量（kWh/h）

    Args:
      f_SFP_d_t(ndarray): 日付dの時刻tにおける全般換気設備の比消費電力[W/(m^3/h)]
      A_A(float): 床面積の合計[m^2]
      N(float): 換気回数[1/h]
      e(float): 有効換気量率

    Returns:
      ndarray: E_E_VG_d_t 日付dの時刻tにおける1時間当たりの全般換気設備の消費電力量[kWh/h]

    """
    V_R = calc_V_R(A_A, N, e)
    return f_SFP_d_t * V_R / 1000 # (2)


def calc_V_R(A_A, N, e):
    """全般換気設備の参照機械換気量

    Args:
      A_A(float): 床面積の合計[m^2]
      N(float): 換気回数[1/h]
      e(float): 有効換気量率

    Returns:
      float: V_R 全般換気設備の参照機械換気量[m^3/h]

    """
    H_R = get_H_R()
    a = get_a()
    return A_A * H_R * N * a / e


# ============================================================================
# 6.1 参照天井高さ
# ============================================================================

def get_H_R():
    """参照天井高さの取得

    Args:

    Returns:
      float: H_R 参照天井高さ[m](=2.4[m])

    """
    return 2.4


# ============================================================================
# 6.2 換気回数
# ============================================================================

# ============================================================================
# 6.3 全般換気設備の換気量の余裕率
# ============================================================================

def get_a():
    """全般換気設備の換気量の余裕率

    Args:

    Returns:
      float: a 全般換気設備の換気量の余裕率(=1.1)

    """
    return 1.1


# ============================================================================
# 6.4 比消費電力
# ============================================================================

def get_f_SFP(P, V_d):
    """比消費電力の取得

    Args:
      P(float): 全般換気設備の消費電力[W]
      V_d(float): 全般換気設備の設計風量[m^3/h]

    Returns:
      float: f_SEP　比消費電力[W/(m^3/h)]

    """
    f_SFP = P / V_d
    # 1/100 未満の端数を切り上げた小数第二位までの値
    return ceil(f_SFP * 100) / 100


# ============================================================================
# 6.5 有効換気量率
# ============================================================================

def get_e():
    """有効換気量率の取得

    Args:

    Returns:
      float: eturns: eturn: e 有効換気量率

    """
    return 1.0


# ============================================================================
# 7. 局所換気設備の消費電力量
# ============================================================================

def calc_E_E_VL_d_t(n_p, schedule_v):
    """1 時間当たりの局所換気設備の消費電力量

    Args:
      n_p(float): 仮想居住人数
      schedule_v(ndarray): 換気スケジュール

    Returns:
      ndarray: E_E_VL_d_t 日付𝑑の時刻𝑡における 1 時間当たりの局所換気設備の消費電力量[kWh/h]

    """
    # (5)
    if 1 <= n_p and n_p <= 2:
        E_E_VL_1_d_t = get_E_E_VL_p_d_t(1, schedule_v)
        E_E_VL_2_d_t = get_E_E_VL_p_d_t(2, schedule_v)
        return E_E_VL_1_d_t * (2 - n_p) / (2 - 1) + E_E_VL_2_d_t * (n_p - 1) / (2 - 1)
    elif 2 <= n_p and n_p <= 3:
        E_E_VL_2_d_t = get_E_E_VL_p_d_t(2, schedule_v)
        E_E_VL_3_d_t = get_E_E_VL_p_d_t(3, schedule_v)
        return E_E_VL_2_d_t * (3 - n_p) / (3 - 2) + E_E_VL_3_d_t * (n_p - 2) / (3 - 2)
    elif 3 <= n_p and n_p <= 4:
        E_E_VL_3_d_t = get_E_E_VL_p_d_t(3, schedule_v)
        E_E_VL_4_d_t = get_E_E_VL_p_d_t(4, schedule_v)
        return E_E_VL_3_d_t * (4 - n_p) / (4 - 3) + E_E_VL_4_d_t * (n_p - 3) / (4 - 3)


def get_E_E_VL_p_d_t(p, schedule_v):
    """局所換気設備の 1 時間当たりの消費電力量

    Args:
      p(float): 居住人数
      schedule_v(ndarray): 換気スケジュール

    Returns:
      ndarray: E_E_VL_p_d_t 日付𝑑の時刻𝑡における1時間当たりの居住人数が𝑝人における局所換気設備の消費電力量[kWh/h]

    """
    # 全日平日とみなした24時間365日の消費電力量
    tmp_0 = np.tile([table_c_1[i][(p - 1) * 3] for i in range(24)], 365)

    # 休日外出とみなした24時間365日の消費電力量
    tmp_1 = np.tile([table_c_1[i][(p - 1) * 3 + 1] for i in range(24)], 365)

    # 休日在宅とみなした24時間365日の消費電力量
    tmp_2 = np.tile([table_c_1[i][(p - 1) * 3 + 2] for i in range(24)], 365)

    # 時間単位に展開した生活パターン
    schedule_extend = np.repeat(schedule_v, 24)

    tmp = (tmp_0 * (schedule_extend == '平日')
           + tmp_1 * (schedule_extend == '休日外')
           + tmp_2 * (schedule_extend == '休日在'))

    return tmp / 1000


# ============================================================================
# 付録 A 全般換気設備の比消費電力
# ============================================================================

# ============================================================================
# A.1 ダクト式換気設備
# ============================================================================

# 表 A.1 基本となる比消費電力
table_a_1 = {
    'ダクト式第一種換気設備（熱交換型換気設備）': 0.70,
    'ダクト式第一種換気設備': 0.50,
    'ダクト式第二種換気設備又はダクト式第三種換気設備': 0.40
}

# 省エネルギー対策の効果率
table_a_2 = {
    'ダクト式第一種換気設備': {
        '内径 75mm 以上のダクトのみ使用': {
            '直流': 0.455,
            '交流、又は直流と交流の併用': 0.700
        },
        '上記以外': {
            '直流あるいは交流': 1.000
        }
    },
    'ダクト式第二種換気設備又はダクト式第三種換気設備': {
        '内径 75mm 以上のダクトのみ使用': {
            '直流': 0.360,
            '交流、又は直流と交流の併用': 0.600
        },
        '上記以外': {
            '直流あるいは交流': 1.000
        }
    }
}

# ============================================================================
# A.2 壁付け式換気設備
# ============================================================================

# 表 A.3 壁付け式全般換気設備の比消費電力
table_a_3 = {
    '壁付け式第一種換気設備（熱交換型換気設備）': 0.70,
    '壁付け式第一種換気設備': 0.40,
    '壁付け式第二種換気設備又は壁付け式第三種換気設備': 0.30,
}

# 付録 C 局所換気設備の 1 時間当たりの消費電力量
table_c_1 = [
    (0.13, 0.13, 0.13, 0.25, 0.25, 0.25, 0.38, 0.38, 0.38, 0.5, 0.5, 0.5),
    (0.13, 0.13, 0.13, 0.25, 0.25, 0.25, 0.38, 0.38, 0.38, 0.5, 0.5, 0.5),
    (0.13, 0.13, 0.13, 0.25, 0.25, 0.25, 0.38, 0.38, 0.38, 0.5, 0.5, 0.5),
    (0.13, 0.13, 0.13, 0.25, 0.25, 0.25, 0.38, 0.38, 0.38, 0.5, 0.5, 0.5),
    (0.13, 0.13, 0.13, 0.25, 0.25, 0.25, 0.38, 0.38, 0.38, 0.5, 0.5, 0.5),
    (0.13, 0.13, 0.13, 0.25, 0.25, 0.25, 0.38, 0.38, 0.38, 0.5, 0.5, 0.5),
    (3.38, 0.33, 0.13, 6.75, 0.67, 0.25, 10.13, 1, 0.38, 13.51, 1.33, 0.5),
    (0.54, 0.33, 0.54, 1.08, 0.67, 1.08, 1.63, 1, 1.63, 2.17, 1.33, 2.17),
    (0.54, 7.05, 3.79, 1.08, 14.09, 7.59, 1.63, 21.14, 11.38, 2.17, 28.18, 15.18),
    (0.13, 0.13, 0.33, 0.25, 0.25, 0.67, 0.38, 0.38, 1, 0.5, 0.5, 1.33),
    (0.33, 0.13, 0.54, 0.67, 0.25, 1.08, 1, 0.38, 1.63, 1.33, 0.5, 2.17),
    (0.13, 0.13, 0.33, 0.25, 0.25, 0.67, 0.38, 0.38, 1, 0.5, 0.5, 1.33),
    (3.38, 0.13, 3.38, 6.75, 0.25, 6.75, 10.13, 0.38, 10.13, 13.51, 0.5, 13.51),
    (0.33, 0.13, 0.33, 0.67, 0.25, 0.67, 1, 0.38, 1, 1.33, 0.5, 1.33),
    (0.13, 0.13, 0.13, 0.25, 0.25, 0.25, 0.38, 0.38, 0.38, 0.5, 0.5, 0.5),
    (0.13, 0.13, 0.13, 0.25, 0.25, 0.25, 0.38, 0.38, 0.38, 0.5, 0.5, 0.5),
    (0.33, 0.13, 0.54, 0.67, 0.25, 1.08, 1, 0.38, 1.63, 1.33, 0.5, 2.17),
    (0.33, 0.13, 6.42, 0.67, 0.25, 12.84, 1, 0.38, 19.26, 1.33, 0.5, 25.68),
    (6.42, 0.13, 6.42, 12.84, 0.25, 12.84, 19.26, 0.38, 19.26, 25.68, 0.5, 25.68),
    (6.42, 0.13, 0.13, 12.84, 0.25, 0.25, 19.26, 0.38, 0.38, 25.68, 0.5, 0.5),
    (0.33, 0.54, 0.33, 0.67, 1.08, 0.67, 1, 1.63, 1, 1.33, 2.17, 1.33),
    (0.33, 0.33, 6.28, 0.67, 0.67, 12.56, 1, 1, 18.84, 1.33, 1.33, 25.12),
    (6.28, 3.52, 6.49, 12.56, 7.03, 12.98, 18.84, 10.55, 19.47, 25.12, 14.06, 25.95),
    (6.7, 6.28, 3.31, 13.39, 12.56, 6.61, 20.09, 18.84, 9.92, 26.79, 25.12, 13.23)
]
