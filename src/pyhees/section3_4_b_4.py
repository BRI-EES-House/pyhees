# B.4 地域の区分、方位及び日除けの形状に応じて算出した日除け効果係数と斜入射特性を用いる方法

def get_f_H_i(f_ang_H, f_sh_H, Direction):
    """開口部iの暖房期の取得日射熱補正係数 式(3a)

    Args:
      f_ang_H(float): 暖房期の垂直入射に対する斜入射の規準化日射熱取得率
      f_sh_H(float): 暖房期の日除け効果係数
      Direction(str): 方位

    Returns:
      float: 開口部iの暖房期の取得日射熱補正係数

    """
    # 屋根又は屋根の直下の天井に設置されている開口部の場合、日よけ効果係数は1.0とする。
    if Direction == 'Top':
        f_sh_H = 1.0

    return f_ang_H * f_sh_H


def get_f_C_i(f_ang_C, f_sh_C, Direction):
    """開口部iの冷房期の取得日射熱補正係数 式(3b)

    Args:
      f_ang_C(float): 冷房期の垂直入射に対する斜入射の規準化日射熱取得率
      f_sh_C(float): 冷房期の日除け効果係数
      Direction(str): 方位

    Returns:
      float: 開口部iの冷房期の取得日射熱補正係数

    """
    # 屋根又は屋根の直下の天井に設置されている開口部の場合、日よけ効果係数は1.0とする。
    if Direction == 'Top':
        f_sh_C = 1.0

    return f_ang_C * f_sh_C


def get_table_b_1(region, glass_spec_category, H_or_C, direction):
    """垂直入射に対する斜入射の規準化日射熱取得率

    Args:
      region(int): 省エネルギー地域区分
      glass_spec_category(str): ガラスの仕様の区分
      H_or_CS(str): 計算対象
      direction(str): 開口部の面する方位
      H_or_C: returns: 垂直入射に対する斜入射の規準化日射熱取得率

    Returns:
      float: 垂直入射に対する斜入射の規準化日射熱取得率

    """
    # 表B.1 垂直入射に対する斜入射の規準化日射熱取得率
    table_b_1 = [
        (0.894, 0.907, 0.925, 0.912, 0.865, 0.908, 0.923, 0.908, 0.934),
        (0.898, 0.884, 0.907, 0.927, 0.928, 0.924, 0.905, 0.886, 0.900),
        (0.847, 0.862, 0.888, 0.866, 0.800, 0.861, 0.885, 0.863, 0.899),
        (0.838, 0.817, 0.849, 0.878, 0.876, 0.872, 0.846, 0.820, 0.825),
        (0.833, 0.846, 0.874, 0.845, 0.774, 0.840, 0.871, 0.847, 0.877),
        (0.810, 0.785, 0.820, 0.852, 0.849, 0.847, 0.817, 0.789, 0.794),
        (0.899, 0.907, 0.921, 0.907, 0.869, 0.910, 0.921, 0.907, 0.934),
        (0.897, 0.887, 0.909, 0.925, 0.918, 0.922, 0.910, 0.886, 0.905),
        (0.853, 0.861, 0.882, 0.860, 0.805, 0.863, 0.883, 0.861, 0.900),
        (0.836, 0.820, 0.852, 0.874, 0.861, 0.869, 0.854, 0.820, 0.834),
        (0.839, 0.846, 0.867, 0.840, 0.780, 0.842, 0.868, 0.845, 0.878),
        (0.807, 0.788, 0.824, 0.848, 0.831, 0.842, 0.826, 0.788, 0.806),
        (0.894, 0.905, 0.915, 0.903, 0.858, 0.908, 0.926, 0.908, 0.936),
        (0.899, 0.888, 0.906, 0.923, 0.921, 0.922, 0.907, 0.887, 0.906),
        (0.847, 0.859, 0.874, 0.853, 0.792, 0.859, 0.890, 0.862, 0.903),
        (0.840, 0.822, 0.848, 0.871, 0.866, 0.870, 0.850, 0.821, 0.836),
        (0.833, 0.844, 0.859, 0.833, 0.766, 0.837, 0.875, 0.845, 0.882),
        (0.812, 0.791, 0.819, 0.844, 0.837, 0.844, 0.822, 0.790, 0.807),
        (0.893, 0.905, 0.925, 0.903, 0.844, 0.900, 0.921, 0.905, 0.940),
        (0.897, 0.883, 0.911, 0.921, 0.913, 0.921, 0.909, 0.882, 0.912),
        (0.846, 0.858, 0.887, 0.852, 0.776, 0.850, 0.881, 0.858, 0.908),
        (0.837, 0.816, 0.853, 0.868, 0.853, 0.868, 0.852, 0.814, 0.846),
        (0.831, 0.841, 0.871, 0.830, 0.750, 0.827, 0.865, 0.841, 0.886),
        (0.809, 0.784, 0.825, 0.841, 0.822, 0.841, 0.824, 0.782, 0.817),
        (0.902, 0.907, 0.919, 0.903, 0.863, 0.906, 0.919, 0.906, 0.934),
        (0.902, 0.874, 0.909, 0.929, 0.930, 0.926, 0.906, 0.875, 0.901),
        (0.857, 0.863, 0.878, 0.854, 0.801, 0.859, 0.880, 0.860, 0.900),
        (0.843, 0.803, 0.851, 0.881, 0.875, 0.877, 0.847, 0.806, 0.826),
        (0.843, 0.847, 0.863, 0.834, 0.779, 0.839, 0.864, 0.844, 0.879),
        (0.816, 0.770, 0.822, 0.857, 0.847, 0.853, 0.818, 0.773, 0.794),
        (0.889, 0.906, 0.923, 0.901, 0.852, 0.901, 0.924, 0.907, 0.937),
        (0.907, 0.876, 0.910, 0.932, 0.926, 0.922, 0.909, 0.880, 0.902),
        (0.840, 0.860, 0.885, 0.851, 0.790, 0.851, 0.885, 0.862, 0.904),
        (0.849, 0.806, 0.851, 0.885, 0.870, 0.871, 0.851, 0.812, 0.829),
        (0.825, 0.844, 0.870, 0.829, 0.767, 0.829, 0.869, 0.845, 0.883),
        (0.822, 0.773, 0.823, 0.862, 0.841, 0.845, 0.822, 0.780, 0.797),
        (0.879, 0.905, 0.924, 0.900, 0.845, 0.897, 0.924, 0.905, 0.941),
        (0.909, 0.867, 0.903, 0.928, 0.933, 0.929, 0.905, 0.868, 0.902),
        (0.828, 0.859, 0.887, 0.847, 0.781, 0.845, 0.885, 0.859, 0.909),
        (0.851, 0.796, 0.844, 0.880, 0.878, 0.881, 0.845, 0.795, 0.828),
        (0.812, 0.841, 0.871, 0.824, 0.758, 0.822, 0.869, 0.841, 0.888),
        (0.824, 0.763, 0.814, 0.856, 0.849, 0.858, 0.816, 0.762, 0.795),
        (0.890, 0.901, 0.920, 0.908, 0.876, 0.905, 0.920, 0.903, 0.935),
        (0.842, 0.853, 0.882, 0.861, 0.820, 0.858, 0.881, 0.856, 0.901),
        (0.827, 0.835, 0.865, 0.840, 0.798, 0.837, 0.865, 0.839, 0.879)
    ]

    # 開口部の面する方位からインデックスへ
    dir_dic = {
        'N': 0,
        'NE': 1,
        'E': 2,
        'SE': 3,
        'S': 4,
        'SW': 5,
        'W': 6,
        'NW': 7,
        'Top': 8
    }
    dir_index = dir_dic[direction]

    # ガラス仕様の区分からインデックスへ
    spec_dic = {
        'Single' : 0,
        '2Pair' : 1,
        '3Pair' : 2
    }
    spec_index = spec_dic[glass_spec_category]

    if region not in [1, 2, 3, 4, 5, 6, 7, 8]:
        raise ValueError(region)

    if H_or_C == 'C':
        if region != 8:
            index = (region-1)*6 + spec_index*2
        else:
            index = (region-1)*6 + spec_index
    elif H_or_C == 'H':
        index = (region-1)*6 + spec_index*2 + 1
    else:
        raise ValueError(H_or_C)

    return table_b_1[index][dir_index]
