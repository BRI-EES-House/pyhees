# ============================================================================
# 付録M 給湯使用および入浴に関するスケジュール
# ============================================================================

import numpy as np


def get_table_m_for_p(p):
    """# 居住人数p人における基準給湯量のテーブルの選択

    Args:
      p(float): 居住人数 (人)

    Returns:
      tuple: 居住人数p人における基準給湯量のテーブル

    """
    if p == 4:
        return get_table_m_1_a_1(), get_table_m_1_a_2(), get_table_m_1_a_3(), get_table_m_1_a_4(), get_table_m_1_a_5(), get_table_m_1_a_6()
    elif p == 3:
        return get_table_m_1_b_1(), get_table_m_1_b_2(), get_table_m_1_b_3(), get_table_m_1_b_4(), get_table_m_1_b_5(), get_table_m_1_b_6()
    elif p == 2:
        return get_table_m_1_c_1(), get_table_m_1_c_2(), get_table_m_1_c_3(), get_table_m_1_c_4(), get_table_m_1_c_5(), get_table_m_1_c_6()
    elif p == 1:
        return get_table_m_1_d_1(), get_table_m_1_d_2(), get_table_m_1_d_3(), get_table_m_1_d_4(), get_table_m_1_d_5(), get_table_m_1_d_6()
    else:
        raise ValueError(p)

def get_table_m_1_a_1():
    """表M.1(a)-1 居住人数4人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    Args:

    Returns:
      list: 表M.1(a)-1 居住人数4人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    """
    # 表M.1(a)-1 居住人数4人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))
    table_m_1_a_1 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 8, 0, 0, 0, 0),
        (6, 0, 0, 4, 0, 0, 0, 0),
        (24, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 4, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (32, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (44, 0, 0, 2, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 180, 0, 0, 0),
        (74, 50, 0, 6, 0, 0, 1, 0),
        (0, 90, 0, 6, 0, 0, 1, 0),
        (0, 100, 0, 6, 0, 0, 2, 0),
        (0, 0, 0, 6, 0, 0, 0, 0),
    ])
    return table_m_1_a_1


def get_table_m_1_a_2():
    """表M.1(a)-2 居住人数4人における基準給湯量および入浴人数(生活スケジュール：休日在宅(小))

    Args:

    Returns:
      list: 表M.1(a)-2 居住人数4人における基準給湯量および入浴人数(生活スケジュール：休日在宅(小))

    """
    # 表M.1(a)-2 居住人数4人における基準給湯量および入浴人数(生活スケジュール：休日在宅(小))
    table_m_1_a_2 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 4, 0, 0, 0, 0),
        (6, 0, 0, 0, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 4, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (32, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (32, 0, 0, 2, 0, 0, 0, 0),
        (16, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 180, 0, 0, 0),
        (50, 50, 0, 4, 0, 0, 1, 0),
        (0, 50, 0, 4, 0, 0, 1, 0),
        (0, 100, 0, 4, 0, 0, 2, 0),
        (0, 0, 0, 4, 0, 0, 0, 0),
    ])
    return table_m_1_a_2

def get_table_m_1_a_3():
    """表M.1(a)-3 居住人数4人における基準給湯量および入浴人数(生活スケジュール：平日(大))

    Args:

    Returns:
      list: 表M.1(a)-3 居住人数4人における基準給湯量および入浴人数(生活スケジュール：平日(大))

    """
    # 表M.1(a)-3 居住人数4人における基準給湯量および入浴人数(生活スケジュール：平日(大))
    table_m_1_a_3 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (6, 0, 0, 8, 0, 0, 0, 0),
        (22, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (12, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (30, 0, 0, 2, 0, 0, 0, 0),
        (10, 0, 0, 0, 180, 0, 0, 0),
        (56, 50, 0, 4, 0, 0, 1, 0),
        (0, 50, 0, 4, 0, 0, 1, 0),
        (0, 100, 0, 4, 0, 0, 2, 0),
        (0, 0, 0, 4, 0, 0, 0, 0),
    ])
    return table_m_1_a_3

def get_table_m_1_a_4():
    """表M.1(a)-4 居住人数4人における基準給湯量および入浴人数(生活スケジュール：平日(中))

    Args:

    Returns:
      list: 表M.1(a)-4 居住人数4人における基準給湯量および入浴人数(生活スケジュール：平日(中))

    """
    # 表M.1(a)-4 居住人数4人における基準給湯量および入浴人数(生活スケジュール：平日(中))
    table_m_1_a_4 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (6, 0, 0, 8, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (6, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (30, 0, 0, 0, 0, 0, 0, 0),
        (10, 0, 0, 0, 180, 0, 0, 0),
        (36, 45, 0, 4, 0, 0, 1, 0),
        (0, 50, 0, 4, 0, 0, 1, 0),
        (0, 55, 0, 4, 0, 0, 2, 0),
        (0, 0, 0, 4, 0, 0, 0, 0),
    ])
    return table_m_1_a_4


def get_table_m_1_a_5():
    """表M.1(a)-5 居住人数4人における基準給湯量および入浴人数(生活スケジュール：平日(小))

    Args:

    Returns:
      list: 表M.1(a)-5 居住人数4人における基準給湯量および入浴人数(生活スケジュール：平日(小))

    """
    # 表M.1(a)-5 居住人数4人における基準給湯量および入浴人数(生活スケジュール：平日(小))
    table_m_1_a_5 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (4, 0, 0, 4, 0, 0, 0, 0),
        (6, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (16, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 180, 0, 0, 0),
        (36, 40, 0, 0, 0, 0, 1, 0),
        (0, 40, 0, 0, 0, 0, 1, 0),
        (0, 20, 0, 2, 0, 0, 2, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
    ])
    return table_m_1_a_5


def get_table_m_1_a_6():
    """表M.1(a)-6 居住人数4人における基準給湯量および入浴人数(生活スケジュール：休日外出)

    Args:

    Returns:
      list: 表M.1(a)-6 居住人数4人における基準給湯量および入浴人数(生活スケジュール：休日外出)

    """
    # 表M.1(a)-6 居住人数4人における基準給湯量および入浴人数(生活スケジュール：休日外出)
    table_m_1_a_6 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 6, 0, 0, 0, 0),
        (0, 0, 0, 6, 0, 0, 0, 0),
        (32, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 45, 0, 0, 0, 0, 0, 0),
        (0, 50, 0, 8, 0, 0, 0, 0),
        (0, 95, 0, 4, 0, 0, 0, 0),
        (0, 0, 0, 4, 0, 0, 0, 0),
    ])
    return  table_m_1_a_6


def get_table_m_1_b_1():
    """表M.1(b)-1 居住人数3人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    Args:

    Returns:
      list: 表M.1(b)-1 居住人数3人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    """
    # 表M.1(b)-1 居住人数3人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))
    table_m_1_b_1 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 8, 0, 0, 0, 0),
        (6, 0, 0, 4, 0, 0, 0, 0),
        (24, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 4, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (32, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (44, 0, 0, 2, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 180, 0, 0, 0),
        (54, 55, 0, 8, 0, 0, 1, 0),
        (0, 95, 0, 8, 0, 0, 1, 0),
        (0, 60, 0, 8, 0, 0, 1, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_b_1


def get_table_m_1_b_2():
    """表M.1(b)-2 居住人数3人における基準給湯量および入浴人数(生活スケジュール：休日在宅(小))

    Args:

    Returns:
      list: 表M.1(b)-2 居住人数3人における基準給湯量および入浴人数(生活スケジュール：休日在宅(小))

    """
    # 表M.1(b)-2 居住人数3人における基準給湯量および入浴人数(生活スケジュール：休日在宅(小))
    table_m_1_b_2 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 4, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 4, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (32, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (28, 0, 0, 2, 0, 0, 0, 0),
        (16, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 180, 0, 0, 0),
        (52, 55, 0, 2, 0, 0, 1, 0),
        (0, 50, 0, 4, 0, 0, 1, 0),
        (0, 55, 0, 4, 0, 0, 1, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_b_2


def get_table_m_1_b_3():
    """表M.1(b)-3 居住人数3人における基準給湯量および入浴人数(生活スケジュール：平日(大))

    Args:

    Returns:
      list: 表M.1(b)-3 居住人数3人における基準給湯量および入浴人数(生活スケジュール：平日(大))

    """
    # 表M.1(b)-3 居住人数3人における基準給湯量および入浴人数(生活スケジュール：平日(大))
    table_m_1_b_3 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (6, 0, 0, 6, 0, 0, 0, 0),
        (22, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (12, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (30, 0, 0, 2, 0, 0, 0, 0),
        (6, 0, 0, 0, 180, 0, 0, 0),
        (56, 50, 0, 4, 0, 0, 1, 0),
        (0, 55, 0, 4, 0, 0, 1, 0),
        (0, 55, 0, 4, 0, 0, 1, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_b_3


def get_table_m_1_b_4():
    """表M.1(b)-4 居住人数3人における基準給湯量および入浴人数(生活スケジュール：平日(中))

    Args:

    Returns:
      list: 表M.1(b)-4 居住人数3人における基準給湯量および入浴人数(生活スケジュール：平日(中))

    """
    # 表M.1(b)-4 居住人数3人における基準給湯量および入浴人数(生活スケジュール：平日(中))
    table_m_1_b_4 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (6, 0, 0, 6, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (6, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (30, 0, 0, 0, 0, 0, 0, 0),
        (6, 0, 0, 0, 180, 0, 0, 0),
        (36, 45, 0, 4, 0, 0, 1, 0),
        (0, 50, 0, 4, 0, 0, 1, 0),
        (0, 15, 0, 4, 0, 0, 1, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return  table_m_1_b_4


def get_table_m_1_b_5():
    """表M.1(b)-5 居住人数3人における基準給湯量および入浴人数(生活スケジュール：平日(小))

    Args:

    Returns:
      list: 表M.1(b)-5 居住人数3人における基準給湯量および入浴人数(生活スケジュール：平日(小))

    """
    # 表M.1(b)-5 居住人数3人における基準給湯量および入浴人数(生活スケジュール：平日(小))
    table_m_1_b_5 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (4, 0, 0, 6, 0, 0, 0, 0),
        (6, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (10, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 180, 0, 0, 0),
        (28, 45, 0, 0, 0, 0, 1, 0),
        (0, 5, 0, 0, 0, 0, 1, 0),
        (0, 10, 0, 6, 0, 0, 1, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_b_5


def get_table_m_1_b_6():
    """表M.1(b)-6 居住人数3人における基準給湯量および入浴人数(生活スケジュール：休日外出)

    Args:

    Returns:
      list: 表M.1(b)-6 居住人数3人における基準給湯量および入浴人数(生活スケジュール：休日外出)

    """
    # 表M.1(b)-6 居住人数3人における基準給湯量および入浴人数(生活スケジュール：休日外出)
    table_m_1_b_6 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 6, 0, 0, 0, 0),
        (0, 0, 0, 6, 0, 0, 0, 0),
        (58, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 45, 0, 0, 0, 0, 0, 0),
        (0, 45, 0, 14, 0, 0, 0, 0),
        (0, 20, 0, 6, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_b_6


def get_table_m_1_c_1():
    """表M.1(c)-1 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    Args:

    Returns:
      list: 表M.1(c)-1 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    """
    # 表M.1(c)-1 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))
    table_m_1_c_1 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 12, 0, 0, 0, 0),
        (34, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (8, 0, 0, 2, 0, 0, 0, 0),
        (28, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (28, 0, 0, 0, 0, 0, 0, 0),
        (30, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 180, 0, 0, 0),
        (0, 60, 0, 8, 0, 0, 1, 0),
        (0, 70, 0, 6, 0, 0, 1, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_c_1


def get_table_m_1_c_2():
    """表M.1(c)-2 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    Args:

    Returns:
      list: 表M.1(c)-2 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    """
    # 表M.1(c)-2 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(小))
    table_m_1_c_2 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 10, 0, 0, 0, 0),
        (28, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (6, 0, 0, 2, 0, 0, 0, 0),
        (26, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (8, 0, 0, 0, 0, 0, 0, 0),
        (28, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 180, 0, 0, 0),
        (0, 15, 0, 4, 0, 0, 1, 0),
        (0, 55, 0, 4, 0, 0, 1, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_c_2

def get_table_m_1_c_3():
    """表M.1(c)-3 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    Args:

    Returns:
      list: 表M.1(c)-3 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    """
    # 表M.1(c)-3 居住人数2人における基準給湯量および入浴人数(生活スケジュール：平日(大))
    table_m_1_c_3 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 10, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (24, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (6, 0, 0, 2, 0, 0, 0, 0),
        (26, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (8, 0, 0, 0, 0, 0, 0, 0),
        (28, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 180, 0, 0, 0),
        (0, 15, 0, 4, 0, 0, 1, 0),
        (0, 55, 0, 4, 0, 0, 1, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_c_3


def get_table_m_1_c_4():
    """表M.1(c)-4 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    Args:

    Returns:
      list: 表M.1(c)-4 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    """
    # 表M.1(c)-4 居住人数2人における基準給湯量および入浴人数(生活スケジュール：平日(中))
    table_m_1_c_4 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 8, 0, 0, 0, 0),
        (2, 0, 0, 0, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (4, 0, 0, 2, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (6, 0, 0, 0, 0, 0, 0, 0),
        (24, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 180, 0, 0, 0),
        (0, 15, 0, 2, 0, 0, 1, 0),
        (0, 15, 0, 2, 0, 0, 1, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_c_4

def get_table_m_1_c_5():
    """表M.1(c)-5 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    Args:

    Returns:
      list: 表M.1(c)-5 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    """
    # 表M.1(c)-5 居住人数2人における基準給湯量および入浴人数(生活スケジュール：平日(小))
    table_m_1_c_5 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 8, 0, 0, 0, 0),
        (2, 0, 0, 0, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (2, 0, 0, 2, 0, 0, 0, 0),
        (6, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (6, 0, 0, 0, 0, 0, 0, 0),
        (24, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 55, 0, 2, 0, 0, 0, 0),
        (0, 55, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return  table_m_1_c_5


def get_table_m_1_c_6():
    """表M.1(c)-6 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    Args:

    Returns:
      list: 表M.1(c)-6 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    """
    # 表M.1(c)-6 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日外出)
    table_m_1_c_6 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 8, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (38, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 10, 0, 2, 0, 0, 0, 0),
        (0, 10, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_c_6

def get_table_m_1_d_1():
    """表M.1(d)-1 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    Args:

    Returns:
      list: 表M.1(d)-1 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    """
    # 表M.1(d)-1 居住人数1人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))
    table_m_1_d_1 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (12, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (4, 0, 0, 2, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (24, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 180, 0, 0, 0),
        (0, 80, 0, 4, 0, 0, 1, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_d_1


def get_table_m_1_d_2():
    """表M.1(d)-2 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    Args:

    Returns:
      list: 表M.1(d)-2 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    """
    # 表M.1(d)-2 居住人数1人における基準給湯量および入浴人数(生活スケジュール：休日在宅(小))
    table_m_1_d_2 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (4, 0, 0, 2, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (22, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 180, 0, 0, 0),
        (0, 20, 0, 4, 0, 0, 1, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_d_2


def get_table_m_1_d_3():
    """表M.1(d)-3 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    Args:

    Returns:
      list: 表M.1(d)-3 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    """
    # 表M.1(d)-3 居住人数1人における基準給湯量および入浴人数(生活スケジュール：平日(大))
    table_m_1_d_3 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (2, 0, 0, 0, 0, 0, 0, 0),
        (2, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (2, 0, 0, 2, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (24, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 180, 0, 0, 0),
        (0, 20, 0, 4, 0, 0, 1, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_d_3


def get_table_m_1_d_4():
    """表M.1(d)-4 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    Args:

    Returns:
      list: 表M.1(d)-4 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    """
    # 表M.1(d)-4 居住人数1人における基準給湯量および入浴人数(生活スケジュール：平日(中))
    table_m_1_d_4 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 6, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (24, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (4, 0, 0, 2, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (6, 0, 0, 0, 0, 0, 0, 0),
        (64, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 60, 0, 4, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_d_4


def get_table_m_1_d_5():
    """表M.1(d)-5 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    Args:

    Returns:
      list: 表M.1(d)-5 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    """
    # 表M.1(d)-5 居住人数1人における基準給湯量および入浴人数(生活スケジュール：平日(小))
    table_m_1_d_5 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 4, 0, 0, 0, 0),
        (2, 0, 0, 0, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (2, 0, 0, 2, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
        (22, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 60, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 2, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_d_5


def get_table_m_1_d_6():
    """表M.1(d)-6 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    Args:

    Returns:
      list: 表M.1(d)-6 居住人数2人における基準給湯量および入浴人数(生活スケジュール：休日在宅(大))

    """
    # 表M.1(d)-6 居住人数1人における基準給湯量および入浴人数(生活スケジュール：休日外出)
    table_m_1_d_6 = np.array([
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 4, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (14, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 20, 0, 2, 0, 0, 1, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0),
    ])
    return table_m_1_d_6
